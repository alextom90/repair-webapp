import json
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)

# –°—Ç–∞–Ω –¥—ñ–∞–ª–æ–≥—É
TYPE = 0
ISSUE = 1
NAME = 2
PHONE = 3
CHECK_STATUS = 4

# –§–∞–π–ª –¥–∞–Ω–∏—Ö
DATA_FILE = "clients.json"
ADMIN_ID = 123456789  # üîí –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID

# –ó–∞–≥—Ä—É–∑–∫–∞/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
def load_clients():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_clients(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
clients = load_clients()

# –°—Ç–∞—Ä—Ç –¥—ñ–∞–ª–æ–≥—É
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç —Å–µ—Ä–≤—ñ—Å—É —Ä–µ–º–æ–Ω—Ç—É —Ç–µ—Ö–Ω—ñ–∫–∏. –û–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–∏—Å—Ç—Ä–æ—é:",
        reply_markup=ReplyKeyboardMarkup(
            [["–°–º–∞—Ä—Ç—Ñ–æ–Ω", "–ù–æ—É—Ç–±—É–∫"], ["–ü–ö", "–Ü–Ω—à–µ"]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return TYPE

async def get_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["type"] = update.message.text
    await update.message.reply_text("–Ø–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –ø—Ä–∏—Å—Ç—Ä–æ—î–º?")
    return ISSUE

async def get_issue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["issue"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    context.user_data["status"] = "–ü—Ä–∏–π–Ω—è—Ç–æ"
    
    user_id = update.message.from_user.id
    clients[user_id] = context.user_data
    save_clients(clients)

    order_id = f"ORD{user_id}"
    await update.message.reply_text(
        f"–î—è–∫—É—î–º–æ, {context.user_data['name']}! –í–∞—à –∫–æ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_id}"
    )

    return ConversationHandler.END

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ORD123456):")
    return CHECK_STATUS

async def check_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip().upper()
    if not code.startswith("ORD") or not code[3:].isdigit():
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return CHECK_STATUS

    user_id = int(code[3:])
    data = clients.get(user_id)

    if data:
        await update.message.reply_text(
            f"üîß –°—Ç–∞—Ç—É—Å: {data.get('status', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
            f"üì± –¢–∏–ø: {data['type']}\n"
            f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: {data['issue']}"
        )
    else:
        await update.message.reply_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return

    clients_data = load_clients()
    if not clients_data:
        await update.message.reply_text("–ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return

    response = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å:\n"
    for uid, info in clients_data.items():
        response += (
            f"\nüÜî {uid} | {info['name']}\n"
            f"üì± {info['type']}, ‚ö†Ô∏è {info['issue']}\n"
            f"üìû {info['phone']}, üõ† {info.get('status', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        )
    await update.message.reply_text(response)

# –ö–æ–º–∞–Ω–¥–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
app = ApplicationBuilder().token("7715128894:AAFaA0ZGlroyEDkZAB13iEvpGhoIqk8mqk4").build()

# –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_type)],
        ISSUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_issue)],
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
status_conv = ConversationHandler(
    entry_points=[CommandHandler("status", status)],
    states={
        CHECK_STATUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_status)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
app.add_handler(conv_handler)
app.add_handler(status_conv)
app.add_handler(CommandHandler("admin", admin))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app.run_polling()