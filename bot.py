import json
import os
import re
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)

# –°—Ç–∞–Ω–∏ –¥—ñ–∞–ª–æ–≥—É
TYPE, ISSUE, NAME, PHONE, CHECK_STATUS, ADMIN_ACTION, ADMIN_UPDATE_STATUS = range(7)

# –§–∞–π–ª–∏ –¥–∞–Ω–∏—Ö
DATA_FILE = "clients.json"
LOG_FILE = "bot_log.txt"
ADMIN_IDS = [630776286]  # üîí –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def load_data(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data, filename):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def log_action(action, user_id=None):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] UserID: {user_id} - {action}\n")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
clients = load_data(DATA_FILE)

# –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä—É
def validate_phone(phone):
    phone = re.sub(r"[^\d+]", "", phone)
    return len(phone) >= 10 and phone.startswith(("+", "0"))

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
def generate_order_id(user_id):
    return f"ORD{user_id}_{datetime.now().strftime('%Y%m%d%H%M')}"

# –°—Ç–∞—Ä—Ç –¥—ñ–∞–ª–æ–≥—É
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_action(f"Started conversation", user.id)
    
    await update.message.reply_text(
        "üîß –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç —Å–µ—Ä–≤—ñ—Å—É —Ä–µ–º–æ–Ω—Ç—É —Ç–µ—Ö–Ω—ñ–∫–∏.\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–∏—Å—Ç—Ä–æ—é:",
        reply_markup=ReplyKeyboardMarkup(
            [["üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω", "üíª –ù–æ—É—Ç–±—É–∫"], ["üñ•Ô∏è –ü–ö", "‚åö –Ü–Ω—à–µ"]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return TYPE

async def get_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["type"] = update.message.text
    await update.message.reply_text(
        "–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∑ –ø—Ä–∏—Å—Ç—Ä–æ–µ–º:",
        reply_markup=ReplyKeyboardRemove()
    )
    return ISSUE

async def get_issue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["issue"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É (—Ñ–æ—Ä–º–∞—Ç: +380XXXXXXXXX –∞–±–æ 0XXXXXXXXX):"
    )
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    if not validate_phone(phone):
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return PHONE
    
    context.user_data["phone"] = phone
    context.user_data["status"] = "üü° –ü—Ä–∏–π–Ω—è—Ç–æ"
    context.user_data["timestamp"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    user_id = update.message.from_user.id
    order_id = generate_order_id(user_id)
    context.user_data["order_id"] = order_id
    
    clients[user_id] = context.user_data
    save_data(clients, DATA_FILE)
    
    log_action(f"Created order: {order_id}", user_id)
    
    await update.message.reply_text(
        f"‚úÖ –î—è–∫—É—î–º–æ, {context.user_data['name']}!\n"
        f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ.\n\n"
        f"üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
        f"üÜî –ö–æ–¥: {order_id}\n"
        f"üì± –ü—Ä–∏—Å—Ç—Ä—ñ–π: {context.user_data['type']}\n"
        f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: {context.user_data['issue']}\n\n"
        f"–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /status"
    )
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                admin_id,
                f"üìå –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n"
                f"üÜî {order_id}\n"
                f"üë§ {context.user_data['name']}\n"
                f"üìû {phone}\n"
                f"üì± {context.user_data['type']}\n"
                f"‚ö†Ô∏è {context.user_data['issue']}"
            )
        except Exception as e:
            log_action(f"Failed to notify admin {admin_id}: {str(e)}", user_id)
    
    return ConversationHandler.END

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_action("Checking status", user.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_data = clients.get(user.id)
    if user_data:
        await update.message.reply_text(
            f"üîç –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
            f"üÜî –ö–æ–¥: {user_data['order_id']}\n"
            f"üì± –ü—Ä–∏—Å—Ç—Ä—ñ–π: {user_data['type']}\n"
            f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: {user_data['issue']}\n"
            f"üõ† –°—Ç–∞—Ç—É—Å: {user_data['status']}\n"
            f"üìÖ –î–∞—Ç–∞: {user_data['timestamp']}"
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ORD123456_20240101):"
        )
        return CHECK_STATUS

async def check_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip().upper()
    if not re.match(r"ORD\d+_\d{12}", code):
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return CHECK_STATUS

    # –ü–æ—à—É–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –∫–æ–¥–æ–º
    found = False
    for user_id, data in clients.items():
        if data.get("order_id") == code:
            await update.message.reply_text(
                f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É:\n"
                f"üÜî –ö–æ–¥: {code}\n"
                f"üë§ –Ü–º'—è: {data['name']}\n"
                f"üì± –ü—Ä–∏—Å—Ç—Ä—ñ–π: {data['type']}\n"
                f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: {data['issue']}\n"
                f"üõ† –°—Ç–∞—Ç—É—Å: {data['status']}\n"
                f"üìÖ –î–∞—Ç–∞: {data['timestamp']}"
            )
            found = True
            break
    
    if not found:
        await update.message.reply_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    
    return ConversationHandler.END

# –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        log_action("Unauthorized admin access attempt", user.id)
        return
    
    log_action("Admin panel accessed", user.id)
    
    await update.message.reply_text(
        "üîê –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=ReplyKeyboardMarkup(
            [["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å"], ["üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", "üì§ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö"]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return ADMIN_ACTION

async def admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    action = update.message.text
    user = update.message.from_user
    
    if action == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        total = len(clients)
        statuses = {}
        for data in clients.values():
            statuses[data.get("status", "–ù–µ–≤—ñ–¥–æ–º–æ")] = statuses.get(data.get("status", "–ù–µ–≤—ñ–¥–æ–º–æ"), 0) + 1
        
        stats = "\n".join([f"{k}: {v}" for k, v in statuses.items()])
        await update.message.reply_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üìå –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {total}\n"
            f"üìà –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n{stats}"
        )
        return ConversationHandler.END
    
    elif action == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å":
        if not clients:
            await update.message.reply_text("üì≠ –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
            return ConversationHandler.END
        
        response = "üìã –û—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–º–æ–≤–ª–µ–Ω—å:\n"
        for i, (uid, data) in enumerate(list(clients.items())[-10:], 1):
            response += (
                f"\n{i}. üÜî {data.get('order_id', 'N/A')}\n"
                f"üë§ {data['name']}, üìû {data['phone']}\n"
                f"üì± {data['type']}, ‚ö†Ô∏è {data['issue']}\n"
                f"üõ† {data.get('status', '–ù–µ–≤—ñ–¥–æ–º–æ')}, üìÖ {data.get('timestamp', 'N/A')}\n"
            )
        
        await update.message.reply_text(response)
        return ConversationHandler.END
    
    elif action == "üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å":
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:",
            reply_markup=ReplyKeyboardRemove()
        )
        return ADMIN_UPDATE_STATUS
    
    elif action == "üì§ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö":
        if not clients:
            await update.message.reply_text("üì≠ –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.")
            return ConversationHandler.END
        
        try:
            with open("orders_export.json", "w", encoding="utf-8") as f:
                json.dump(clients, f, ensure_ascii=False, indent=2)
            
            await update.message.reply_document(
                document=open("orders_export.json", "rb"),
                filename=f"orders_export_{datetime.now().strftime('%Y%m%d')}.json"
            )
            log_action("Exported data", user.id)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ: {str(e)}")
            log_action(f"Export failed: {str(e)}", user.id)
        
        return ConversationHandler.END
    
    else:
        await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")
        return ConversationHandler.END

async def admin_update_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip().upper()
    found = False
    
    for user_id, data in clients.items():
        if data.get("order_id") == code:
            context.user_data["edit_order"] = code
            await update.message.reply_text(
                f"–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
                f"üë§ {data['name']}\n"
                f"üì± {data['type']}\n"
                f"‚ö†Ô∏è {data['issue']}\n"
                f"–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {data.get('status', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:",
                reply_markup=ReplyKeyboardMarkup(
                    [["üü° –ü—Ä–∏–π–Ω—è—Ç–æ", "üü† –í —Ä–æ–±–æ—Ç—ñ"], ["üü¢ –í–∏–∫–æ–Ω–∞–Ω–æ", "üî¥ –°–∫–∞—Å–æ–≤–∞–Ω–æ"]],
                    one_time_keyboard=True,
                    resize_keyboard=True
                )
            )
            found = True
            break
    
    if not found:
        await update.message.reply_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END
    
    return ADMIN_UPDATE_STATUS

async def save_updated_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_status = update.message.text
    order_code = context.user_data["edit_order"]
    
    for user_id, data in clients.items():
        if data.get("order_id") == order_code:
            old_status = data.get("status", "–ù–µ–≤—ñ–¥–æ–º–æ")
            data["status"] = new_status
            save_data(clients, DATA_FILE)
            
            await update.message.reply_text(
                f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_code} –∑–º—ñ–Ω–µ–Ω–æ:\n"
                f"–ó {old_status} –Ω–∞ {new_status}",
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É
            try:
                await context.bot.send_message(
                    user_id,
                    f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ:\n"
                    f"üÜî {order_code}\n"
                    f"üõ† –ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å: {new_status}"
                )
                log_action(f"Updated status for {order_code} to {new_status}", update.message.from_user.id)
            except Exception as e:
                log_action(f"Failed to notify user {user_id}: {str(e)}", update.message.from_user.id)
            
            break
    
    return ConversationHandler.END

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    log_action("Conversation canceled", update.message.from_user.id)
    return ConversationHandler.END

# –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user if update.message else None
    user_id = user.id if user else "unknown"
    log_action(f"Error: {context.error}", user_id)
    
    try:
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
    except:
        pass

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
    app = ApplicationBuilder().token("7715128894:AAFaA0ZGlroyEDkZAB13iEvpGhoIqk8mqk4").build()
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    # –û—Å–Ω–æ–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_type)],
            ISSUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_issue)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
    status_conv = ConversationHandler(
        entry_points=[CommandHandler("status", status)],
        states={
            CHECK_STATUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_status)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å
    admin_conv = ConversationHandler(
        entry_points=[CommandHandler("admin", admin)],
        states={
            ADMIN_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_action)],
            ADMIN_UPDATE_STATUS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_update_status),
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_updated_status),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    app.add_handler(order_conv)
    app.add_handler(status_conv)
    app.add_handler(admin_conv)
    app.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    log_action("Bot started", "system")
    app.run_polling()

if __name__ == "__main__":
    main()